<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malware Analysis on TheAbsnt</title>
    <link>https://theabsnt.github.io/tags/malware-analysis/</link>
    <description>Recent content in Malware Analysis on TheAbsnt</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Mar 2025 00:47:42 +0530</lastBuildDate>
    <atom:link href="https://theabsnt.github.io/tags/malware-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Guardians Paradox: When Protector becomes Predator - Malware Version</title>
      <link>https://theabsnt.github.io/posts/guardians-paradox/</link>
      <pubDate>Sat, 29 Mar 2025 00:47:42 +0530</pubDate>
      <guid>https://theabsnt.github.io/posts/guardians-paradox/</guid>
      <description>&lt;h1 id=&#34;the-introduction&#34;&gt;The introduction&lt;/h1&gt;&#xA;&lt;p&gt;Welcome back!.. hope you&amp;rsquo;re having a nice time :)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;We often trust our security software to stand as an unbreakable wall against malware and attacks, but what happens when that very wall is weaponized against us?&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In this blog, we&amp;rsquo;ll analyse a malware and learn along the way, which was found in a recent discovery by Trellix Advanced Research Center &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; that reveals a malware campaign that weaponizes a legitimate Avast Anti-Rootkit driver(&lt;code&gt;aswArPot.sys&lt;/code&gt;) to bypass security measures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Challenge #2: IcedID Configuration Extraction</title>
      <link>https://theabsnt.github.io/posts/z2a_chall/ch02-iced-config-extraction/</link>
      <pubDate>Mon, 24 Mar 2025 00:10:14 +0530</pubDate>
      <guid>https://theabsnt.github.io/posts/z2a_chall/ch02-iced-config-extraction/</guid>
      <description>&lt;h1 id=&#34;the-agenda&#34;&gt;the agenda&lt;/h1&gt;&#xA;&lt;p&gt;Welcome back!.. and i hope you&amp;rsquo;re having a nice time :)&lt;/p&gt;&#xA;&lt;p&gt;This is a quick write-up that will go through the process of unpacking the initial IcedID malware loader and extract, decrypt and display the configuration from the unpacked stage of this malware,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;this is the second challenge from the course &lt;a href=&#34;https://www.0ffset.net/training/zero2auto/&#34;&gt;Zero2Automated&lt;/a&gt; as part of their bi-weekly challenges&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-file-triage&#34;&gt;the file triage&lt;/h1&gt;&#xA;&lt;p&gt;The sample we&amp;rsquo;re provided with is a &lt;code&gt;PE64 DLL&lt;/code&gt; file with &lt;code&gt;SHA256&lt;/code&gt; hash &lt;code&gt;0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Analysis of ChineseAPT: RedDelta&#39;s Recent Infection Chain</title>
      <link>https://theabsnt.github.io/posts/reddelta-malware-campaign-aug-2024/</link>
      <pubDate>Tue, 18 Feb 2025 17:32:36 +0530</pubDate>
      <guid>https://theabsnt.github.io/posts/reddelta-malware-campaign-aug-2024/</guid>
      <description>&lt;h1 id=&#34;the-introduction&#34;&gt;The introduction&lt;/h1&gt;&#xA;&lt;p&gt;In this blog, we&amp;rsquo;ll explore a recent infection chain of malware campaign carried out by Chinese State Sponsored threat actor RedDelta to deliver customized PlugX malware.&lt;/p&gt;&#xA;&lt;p&gt;The infection chain we gonna cover was observed in later half of 2024, which consist of MSC(Microsoft Management Console Snap-In Control) file as the first-stage component. Upon execution, the MSC file was configured to execute VBScript that download and installs a remotely hosted Windows Installer (MSI) file, this MSI file then drops a legitimate executable vulnerable to DLL search order hijacking, a malicious loader DLL written in NIM programming language, and a DAT file containg encrypted PlugX payload and displays a decoy document.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Challenge #1: Gozi String Decryption</title>
      <link>https://theabsnt.github.io/posts/z2a_chall/ch01_gozi_string_decryption/</link>
      <pubDate>Thu, 03 Oct 2024 00:40:09 +0530</pubDate>
      <guid>https://theabsnt.github.io/posts/z2a_chall/ch01_gozi_string_decryption/</guid>
      <description>&lt;h1 id=&#34;whats-the-agenda&#34;&gt;what&amp;rsquo;s the agenda&lt;/h1&gt;&#xA;&lt;p&gt;Welcome back :)&lt;/p&gt;&#xA;&lt;p&gt;Today we&amp;rsquo;ll go through a challenge from &lt;a href=&#34;https://www.0ffset.net/training/zero2auto/&#34;&gt;Zero2Automated: Advanced Malware Analysis&lt;/a&gt; which ask us to reverse engineer the string decryption routine and write an automation script for it.&lt;/p&gt;&#xA;&lt;p&gt;The sample provided is a Gozi/ISFB malware which is couple of years old and is packed, also checking file entropy of &lt;code&gt;7.5&lt;/code&gt; says many random bytes are present which supports file being packed.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a PE32 DLL file with &lt;code&gt;SHA256&lt;/code&gt; hash of &lt;code&gt;0a66e8376fc6d9283e500c6e774dc0a109656fd457a0ce7dbf40419bc8d50936&lt;/code&gt;. Strings output consist mostly of random strings, with some noticeable strings here n there like a PDB file path &lt;code&gt;d:\in\the\town\where\ahung.pdb&lt;/code&gt; and a file name &lt;code&gt;myfile.exe&lt;/code&gt; in version info.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SteamHide Malware Analysis - II</title>
      <link>https://theabsnt.github.io/posts/steamhide/part02/</link>
      <pubDate>Fri, 30 Aug 2024 14:52:23 +0530</pubDate>
      <guid>https://theabsnt.github.io/posts/steamhide/part02/</guid>
      <description>&lt;p&gt;Welcome back :D,&#xA;This post is the continuation of SteamHide malware analysis, here we&amp;rsquo;ll go through the second stage &lt;code&gt;FinalMalware.exe&lt;/code&gt; dropped by &lt;code&gt;Hide binary inside image.exe&lt;/code&gt; downloader by decrypting the ICC profile after pulling out image from stream profile images. Let&amp;rsquo;s get started!!&lt;/p&gt;&#xA;&lt;h1 id=&#34;initial-triage-for-finalmalwareexe&#34;&gt;Initial triage for &amp;lsquo;FinalMalware.exe&amp;rsquo;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;file-identification&#34;&gt;File identification&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://theabsnt.github.io/mat_steamhide/stage02/meta_file_Identification_stage02.png&#34; alt=&#34;meta_fileIdentification&#34;&gt;&#xA;Again &lt;code&gt;DIE&lt;/code&gt; and &lt;code&gt;PortexAnalyzer&lt;/code&gt; outputs indicates that it&amp;rsquo;s a &lt;code&gt;PE 32bit&lt;/code&gt; .NET managed assembly file, we&amp;rsquo;ll use &lt;code&gt;dnSpy&lt;/code&gt; for further examination&lt;/p&gt;</description>
    </item>
    <item>
      <title>SteamHide Malware Analysis - I</title>
      <link>https://theabsnt.github.io/posts/steamhide/part01/</link>
      <pubDate>Fri, 30 Aug 2024 11:51:36 +0530</pubDate>
      <guid>https://theabsnt.github.io/posts/steamhide/part01/</guid>
      <description>&lt;h1 id=&#34;whats-this-blog&#34;&gt;What&amp;rsquo;s this blog&lt;/h1&gt;&#xA;&lt;p&gt;This post explores an interesting malware &lt;code&gt;SteamHide&lt;/code&gt; which abuses &lt;code&gt;Steam&lt;/code&gt; servers to host malware within steam profile images to serve payloads for malware downloaders. Threat Actors can update already infected machines just by adding new images to steam profile.&lt;/p&gt;&#xA;&lt;p&gt;Also, this malware was an assignment for us to analysis from the course &lt;a href=&#34;https://www.udemy.com/course/windows-malware-analysis-for-hedgehogs-beginner-training/&#34;&gt;Windows Malware Analysis for Hedgehogs&lt;/a&gt;, huge shoutout to Karsten Hahn for this brilliant course.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;So, let&amp;rsquo;s start with initial triage the most important step when analyzing a new sample&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
